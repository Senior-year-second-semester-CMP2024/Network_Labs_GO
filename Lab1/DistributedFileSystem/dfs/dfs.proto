syntax = "proto3";

option go_package = "DistributedFileSystem/dfs";

package dfs;

service DFS {
    // 1-2 client - master tracker
    rpc RequestToUpload(Empty) returns (RequestToUploadResponse);
    // 3-4 client - data keeper
    rpc UploadFile(UploadFileRequest) returns (Empty);
    // 5 data keeper - master tracker
    rpc UploadSuccess(UploadSuccessRequest) returns (Empty);
    // 6 master tracker - client
    rpc NotifyClient(NotifyClientRequest) returns (Empty);
    // client - master tracker
    rpc RequestToDownload(RequestToDownloadRequest) returns (RequestToDownloadResponse);
    // client - data keeper
    rpc DownloadFile(DownloadFileRequest) returns (DownloadFileResponse);
    // Heartbeats: master tracker - data keeper
    rpc PingMasterTracker(PingMasterTrackerRequest) returns (Empty);

}

message Empty {}
// RequestToUpload
message RequestToUploadResponse {
    string token = 1;
}
// RequestToDownload
message RequestToDownloadRequest {
    string file_name = 1;
}

message RequestToDownloadResponse {
    repeated MachineInfo machine_infos = 1;
    // TODO:: add file size
    // double file_size = 2;
}

message MachineInfo {
    string ip = 1;
    string port = 2;
}
// UploadFile
message UploadFileRequest {
    string file_name = 1;
    bytes file_data = 2;
}

message UploadFileResponse {
    string message = 1;
}
// UploadSuccess
message UploadSuccessRequest {
    string file_name = 1;
    string data_keeper_node_name = 2;
    string file_path_on_node = 3;
}

message UploadSuccessResponse {
    string message = 1;
}
// DownloadFile
message DownloadFileRequest {
    string file_name = 1;
}

message DownloadFileResponse {
    bytes file_data = 1;
}
// NotifyClient
message NotifyClientRequest {
    string message = 1;
}
// PingMasterTracker
message PingMasterTrackerRequest {
    string nodeName = 1;
    repeated string available_ports = 2;
}